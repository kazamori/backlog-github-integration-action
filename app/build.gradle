plugins {
    id 'application'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    // app
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2'
    implementation 'com.nulab-inc:backlog4j:2.5.1'
    implementation 'com.typesafe:config:1.4.2'
    implementation 'info.picocli:picocli:4.6.3'
    implementation 'org.kohsuke:github-api:1.308'

    // logging
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    // build
    implementation 'com.google.guava:guava:30.1.1-jre'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // testing
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    // mock
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.4.0'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.8.1')
        }
    }
}

testlogger {
    showStandardStreams true
    showStackTraces true
    showPassed true
    showSkipped true
    showFailed true
    showOnlySlow false
    logLevel 'lifecycle'
}

application {
    mainClass = 'jp.kazamori.github.actions.backlog.Main'
}

task githubClient(type: JavaExec) {
    mainClass = 'jp.kazamori.github.actions.backlog.cli.GitHubClientCli'
    classpath = sourceSets.main.runtimeClasspath
}

task backlogClient(type: JavaExec) {
    mainClass = 'jp.kazamori.github.actions.backlog.cli.BacklogClientCli'
    classpath = sourceSets.main.runtimeClasspath
}

task config(type: JavaExec) {
    mainClass = 'jp.kazamori.github.actions.backlog.cli.ConfigCli'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(JavaExec) {
    jvmArgs += '--add-opens'
    jvmArgs += 'java.base/sun.net.www.protocol.https=ALL-UNNAMED'
    jvmArgs += '--add-opens'
    jvmArgs += 'java.base/java.net=ALL-UNNAMED'
}

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  manifest {
    attributes(
      'Artifact-Id': archivesBaseName,
      'Main-Class': 'jp.kazamori.github.actions.backlog.Main'
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

jib {
  from {
    image = 'eclipse-temurin:17-jre-alpine'
    platforms {
      platform {
        architecture = 'amd64'
        os = 'linux'
      }
    }
  }
  to {
    image = 'ghcr.io/kazamori/backlog-github-integration-action'
    tags = ['v1']
  }
  container {
    jvmFlags = [
        "--add-opens", "java.base/sun.net.www.protocol.https=ALL-UNNAMED",
        "--add-opens", "java.base/java.net=ALL-UNNAMED"
    ]
    labels = [
      'org.opencontainers.image.description': "GitHub custom action integrates with Nulab's backlog",
      'org.opencontainers.image.licenses': 'Apache-2.0',
      'org.opencontainers.image.source': 'https://github.com/kazamori/backlog-github-integration-action',
      'org.opencontainers.image.title': 'backlog-github-integration-action',
      'org.opencontainers.image.url': 'https://github.com/kazamori/backlog-github-integration-action/pkgs/container/backlog-github-integration-action'
    ]
    format = 'OCI'
  }
}
